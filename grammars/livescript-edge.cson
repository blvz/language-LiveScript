comment: "LiveScript Syntax: version 1.3"
fileTypes: [
  "ls"
  "Slakefile"
  "ls.erb"
]
firstLineMatch: "^#!.*\\bls"
foldingStartMarker: "^\\s*class\\s+\\S.*$|.*(->|=>)\\s*$|.*[\\[{]\\s*$"
foldingStopMarker: "^\\s*$|^\\s*[}\\]]\\s*$"
name: "LiveScript"
patterns: [
  {
    match: '''
      (?x)
      				!?[~-]{1,2}>\\*?
      				|<[~-]{1,2}!?
      				|\\(\\s* (?=    instanceof[\\s)]|and[\\s)]|or[\\s)]|is[\\s)]|isnt[\\s)]|in[\\s)]|import[\\s)]|import\\ all[\\s)]     |\\.|[-+/*%^&<>=|][\\b\\s)\\w$]|\\*\\*|\\%\\%)
      				|      (?<=[\\s(]instanceof|[\\s(]and|[\\s(]or|[\\s(]is|[\\s(]isnt|[\\s(]in|[\\s(]import|[\\s(]import\\ all|[\\s(]do|\\.|\\*\\*|\\%\\%|[\\b\\s(\\w$][-+/*%^&<>=|]) \\s*\\)

    '''
    name: "storage.type.function.livescript"
  }
  {
    begin: "\\/\\*"
    captures:
      "0":
        name: "punctuation.definition.comment.livescript"
    end: "\\*\\/"
    name: "comment.block.livescript"
    patterns: [
      {
        match: "@\\w*"
        name: "storage.type.annotation.livescriptscript"
      }
    ]
  }
  {
    captures:
      "1":
        name: "punctuation.definition.comment.livescript"
    match: "(#)(?!\\{).*$\\n?"
    name: "comment.line.number-sign.livescript"
  }
  {
    captures:
      "1":
        name: "storage.type.function.livescript"
      "2":
        name: "entity.name.function.livescript"
    match: "((?:!|~|!~|~!)?function\\*?)\\s+([$\\w\\-]*[$\\w]+)"
  }
  {
    captures:
      "1":
        name: "keyword.operator.new.livescript"
      "2":
        name: "entity.name.type.instance.livescript"
    match: "(new)\\s+(\\w+(?:\\.\\w*)*)"
  }
  {
    match: "\\b(package|private|protected|public|interface|enum|static)(?!-)\\b"
    name: "keyword.illegal.livescript"
  }
  {
    begin: "'''"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.livescript"
    end: "'''"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.livescript"
    name: "string.quoted.heredoc.livescript"
  }
  {
    begin: "\"\"\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.livescript"
    end: "\"\"\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.livescript"
    name: "string.quoted.double.heredoc.livescript"
    patterns: [
      {
        match: "\\\\."
        name: "constant.character.escape.livescript"
      }
      {
        include: "#interpolated_livescript"
      }
    ]
  }
  {
    begin: "``"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.livescript"
    end: "``"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.livescript"
    name: "string.quoted.script.livescript"
    patterns: [
      {
        match: "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
        name: "constant.character.escape.livescript"
      }
    ]
  }
  {
    begin: "<\\["
    end: "\\]>"
    name: "string.array-literal.livescript"
  }
  {
    match: "/{2}(?![\\s=/*+{}?]).*?[^\\\\]/[igmy]{0,4}(?![a-zA-Z0-9])/{2}"
    name: "string.regexp.livescript"
  }
  {
    begin: "/{2}\\n"
    end: "/{2}[imgy]{0,4}"
    name: "string.regexp.livescript"
    patterns: [
      {
        include: "#embedded_spaced_comment"
      }
      {
        include: "#interpolated_livescript"
      }
    ]
  }
  {
    begin: "/{2}"
    end: "/{2}[imgy]{0,4}"
    name: "string.regexp.livescript"
    patterns: [
      {
        match: "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
        name: "constant.character.escape.livescript"
      }
      {
        include: "#interpolated_livescript"
      }
    ]
  }
  {
    match: "/(?![\\s=/*+{}?]).*?[^\\\\]/[igmy]{0,4}(?![a-zA-Z0-9])"
    name: "string.regexp.livescript"
  }
  {
    match: '''
      (?x)
      				\\b(?<![\\.\\$\\-@])(
      					instanceof|new|delete|typeof|and|or|is|isnt|not
      				)(?!\\-|\\s*:)\\b

    '''
    name: "keyword.operator.livescript"
  }
  {
    match: "<\\||\\|>"
    name: "keyword.operator.livescript"
  }
  {
    match: "=>"
    name: "keyword.control.livescript"
  }
  {
    match: '''
      (?x)
      				\\b(?<![\\.\\$\\-@])(?:
      				return|break|continue|throw
      				|try|if|while|for|for\\s+own|switch|unless|until
      				|catch|finally|else|nobreak|case|default|fallthrough|when|otherwise|then
      				|yield
      				)(?!\\-|\\s*:)\\b

    '''
    name: "keyword.control.livescript"
  }
  {
    match: '''
      (?x)
      				and=|or=|%|&|\\^|\\*|\\/|(?<![a-zA-Z$_])(\\-)?\\-(?!\\-?>)|\\+\\+|\\+|
      				~(?!~?>)|==|=|!=|<=|>=|<<=|>>=|
      				>>>=|<>|<(?!\\[)|(?<!\\])>|(?<!\\w)!(?!([~\\-]+)?>)|&&|\\.\\.(\\.)?|\\s\\.\\s|\\?|\\|\\||\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|\\.=|&=
      				|\\^=

    '''
    name: "keyword.operator.livescript"
  }
  {
    match: '''
      (?x)
      				\\b(?<![\\.\\$\\-@])(?:
      				function
      				)(?!\\-|\\s*:)\\b

    '''
    name: "storage.type.function.livescript"
  }
  {
    match: '''
      (?x)
      				\\b(?<![\\.\\$\\-@])(?:
      				this|throw|then|try|typeof!?|til|to
      				|continue|const|case|catch|class
      				|in|instanceof|import|import\\s+all|implements|if|is
      				|default|delete|debugger|do
      				|for|for\\s+own|finally|function|from|fallthrough
      				|super|switch
      				|else|nobreak|extends|export|eval
      				|and|arguments
      				|new|not
      				|unless|until
      				|while|with|when
      				|of|or|otherwise
      				|let|var|loop
      				|match
      				|by|yield
      				)(?!\\-|\\s*:)\\b

    '''
    name: "keyword.other.livescript"
  }
  {
    captures:
      "1":
        name: "variable.assignment.livescript"
      "3":
        name: "punctuation.separator.key-value, keyword.operator.livescript"
      "4":
        name: "keyword.operator.livescript"
    match: "([a-zA-Z\\$_](?:[\\w$.-])*)\\s*(?!\\::)((:)|(=(?!>)))\\s*(?!(\\s*!?\\s*\\(.*\\))?\\s*(!?[~-]{1,2}>\\*?))"
  }
  {
    begin: "(?<=\\s|^)([\\[\\{])(?=.*?[\\]\\}]\\s+[:=])"
    beginCaptures:
      "0":
        name: "keyword.operator.livescript"
    end: "([\\]\\}]\\s*[:=])"
    endCaptures:
      "0":
        name: "keyword.operator.livescript"
    name: "meta.variable.assignment.destructured.livescript"
    patterns: [
      {
        include: "#variable_name"
      }
      {
        include: "#instance_variable"
      }
      {
        include: "#single_quoted_string"
      }
      {
        include: "#double_quoted_string"
      }
      {
        include: "#numeric"
      }
    ]
  }
  {
    captures:
      "2":
        name: "entity.name.function.livescript"
      "3":
        name: "entity.name.function.livescript"
      "4":
        name: "variable.parameter.function.livescript"
      "5":
        name: "storage.type.function.livescript"
    match: '''
      (?x)
      				(\\s*)
      				(?=[a-zA-Z\\$_])
      				([a-zA-Z\\$_]([\\w$.:-])*)\\s*
      				(?=[:=](\\s*!?\\s*\\(.*\\))?\\s*(!?[~-]{1,2}>\\*?))

    '''
    name: "meta.function.livescript"
  }
  {
    match: "\\b(?<!\\.)(true|on|yes)(?!\\s*:)\\b"
    name: "constant.language.boolean.true.livescript"
  }
  {
    match: "\\b(?<!\\.)(false|off|no)(?!\\s*:)\\b"
    name: "constant.language.boolean.false.livescript"
  }
  {
    match: "\\b(?<!\\.)(null|void)(?!\\s*:)\\b"
    name: "constant.language.null.livescript"
  }
  {
    match: "\\b(?<!\\.)(super|this|extends)(?!\\s*:)\\b"
    name: "variable.language.livescript"
  }
  {
    captures:
      "1":
        name: "storage.type.class.livescript"
      "2":
        name: "entity.name.type.class.livescript"
      "3":
        name: "keyword.control.inheritance.livescript"
      "4":
        name: "entity.other.inherited-class.livescript"
    match: "(class\\b)\\s+(@?[a-zA-Z$_][\\w$.-]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z$_][\\w$.-]*))?"
    name: "meta.class.livescript"
  }
  {
    match: "\\b(debugger|\\\\)\\b"
    name: "keyword.other.livescript"
  }
  {
    match: '''
      (?x)\\b(
      				Array|ArrayBuffer|Blob|Boolean|Date|document|event|Function|
      				Int(8|16|32|64)Array|Math|Map|Number|
      				Object|Proxy|RegExp|Set|String|WeakMap|
      				window|Uint(8|16|32|64)Array|XMLHttpRequest
      			)\\b
    '''
    name: "support.class.livescript"
  }
  {
    match: "\\b(console)\\b"
    name: "entity.name.type.object.livescript"
  }
  {
    match: "\\b(Infinity|NaN|undefined)\\b"
    name: "constant.language.livescript"
  }
  {
    match: "\\;"
    name: "punctuation.terminator.statement.livescript"
  }
  {
    match: ",[ |\\t]*"
    name: "meta.delimiter.object.comma.livescript"
  }
  {
    match: "\\."
    name: "meta.delimiter.method.period.livescript"
  }
  {
    match: "\\{|\\}"
    name: "meta.brace.curly.livescript"
  }
  {
    match: "\\(|\\)"
    name: "meta.brace.round.livescript"
  }
  {
    match: "\\[|\\]\\s*"
    name: "meta.brace.square.livescript"
  }
  {
    include: "#instance_variable"
  }
  {
    include: "#backslash_string"
  }
  {
    include: "#single_quoted_string"
  }
  {
    include: "#double_quoted_string"
  }
  {
    include: "#numeric"
  }
  {
    captures:
      "1":
        name: "keyword.operator.livescript"
      "2":
        name: "meta.function-call.livescript"
      "3":
        name: "keyword.operator.livescript"
    match: "()(@|@@|[$\\w\\-]*[$\\w]+)\\s*(`)"
  }
  {
    name: "keyword.operator.livescript"
    match: "`"
  }
  {
    captures:
      "1":
        name: "keyword.operator.livescript"
      "2":
        name: "meta.function-call.livescript"
      "3":
        name: "keyword.operator.livescript"
    match: "()(@|@@|[$\\w\\-]*[$\\w]+)(?:(\\??\\!)|[(])"
  }
  {
    captures:
      "1":
        name: "meta.function-call.livescript"
      "2":
        name: "keyword.operator.livescript"
    match: "(@|@@|[$\\w\\-]*[$\\w]+)(\\?)? (?!\\s*(((by|of|and|or|with|when|unless|if|is|isnt|else|nobreak|for|from|not in|in|catch|til|to|then|import|extends|implements|instanceof)\\b)|[=:.*\\/+\\-%\\^<>][ =)]|[`}%*)]|/(?!.*?/)|&&|[.][^.]|=>|\\/ +|\\||\\|\\||\\-\\-|\\+\\+|\\|>|<|\\||$|\\n|\\#|/\\*))"
  }
  {
    match: "\\| _"
    name: "keyword.control.livescript"
  }
  {
    match: "\\|(?![.])"
    name: "keyword.control.livescript"
  }
  {
    match: "\\|"
    name: "keyword.operator.livescript"
  }
  {
    match: "((?<=console\\.)(debug|warn|info|log|error|time(End|-end)|assert))\\b"
    name: "support.function.console.livescript"
  }
  {
    match: '''
      (?x)\\b(
      				decodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|-float|Int|-int)|require
      			)\\b
    '''
    name: "support.function.livescript"
  }
  {
    comment: '''
      Generated by DOM query from http://gkz.github.com/prelude-ls/:
      			[].slice
      			.call(document.querySelectorAll(".nav-pills li a"))
      			.map(function(_) {return _.innerText})
      			.filter(function(_) {return _.trim() !== '})
      			.slice(2)
      			.join("|")

    '''
    match: '''
      (?x)(?<![.-])\\b(
      				map|filter|reject|partition|find|each|head|tail|last|initial|empty|
      				values|keys|length|cons|append|join|reverse|fold(l|r)?1?|unfoldr|
      				and(List|-list)|or(List|-list)|any|all|unique(By|-by)?|sum|product|mean|compact|
      				concat(Map|-map)?|maximum(By|-by)?|minimum(By|-by)?|scan(l|r)?1?|replicate|slice|apply|
      				split(At|-at)?|count(By|-by)|take(While|-while)?|drop(While|-while)?|span|first|
      				break(It|-it)|list(ToObj|-to-obj)|obj(ToFunc|-to-func)|
      				pairs(ToObj|-to-obj)|obj(ToPairs|-to-pairs|ToLists|-to-lists)|
      				zip(All|-all)?(With|-with)?|compose|curry|partial|flip|fix|
      				sort(With|-with|By|-by)?|group(By|-by)|break(List|-list|Str|-str)|
      				difference|intersection|union|average|flatten|chars|unchars|repeat|
      				lines|unlines|words|unwords|max|min|negate|abs|signum|quot|rem|div|mod|
      				recip|pi|tau|exp|sqrt|ln|pow|sin|cos|tan|asin|acos|atan|atan2|truncate|
      				round|ceiling|floor|is(It|-it)NaN|even|odd|gcd|lcm|disabled__id
              |at|(elem|find)(Index|-index|Indices|-indices)
      			)\\b(?![.-])
    '''
    name: "support.function.prelude.livescript"
  }
  {
    match: "(?x)(?<![.-])\\b(that|it|e|_)\\b"
    name: "support.function.semireserved.livescript"
  }
  {
    match: '''
      (?x)((?<=(\\.|\\]|\\)))(
      				apply|call|concat|every|filter|for(Each|-each)|
      				from|has(Own|-own)(Property|-property)|index(Of|-of)|
      				is(Prototype|-prototype)(Of|-of)|join|last(Index|-index)(Of|-of)|
      				map|of|pop|property(Is|-is)(Enumerable|-enumerable)|push|
      				reduce(Right|-right)?|reverse|shift|slice|some|sort|
      				splice|to(Locale|-locale)?(String|-string)|unshift|valueOf
      			))\\b(?!-)
    '''
    name: "support.function.method.array.livescript"
  }
  {
    match: '''
      (?x)((?<=Array\\.)(
      				is(Array|-array)
      			))\\b
    '''
    name: "support.function.static.array.livescript"
  }
  {
    match: '''
      (?x)((?<=Object\\.)(
      				create|define(Propert|-propert)(ies|y)|freeze|
      				get(Own|-own)(Property|-property)(Descriptors?|Names)|
      				get(Property|-property)(Descriptor|Names)|getPrototypeOf|
      				is((Extensible|-extensible)|(Frozen|-frozen)|(Sealed|-sealed))?|
      				keys|prevent(Extensions|-extensions)|seal
      			))\\b
    '''
    name: "support.function.static.object.livescript"
  }
  {
    match: '''
      (?x)((?<=Math\\.)(
      				abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|
      				hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|
      				tan|tanh|trunc
      			))\\b
    '''
    name: "support.function.static.math.livescript"
  }
  {
    match: '''
      (?x)((?<=Number\\.)(
      				is(Finite|Integer|NaN)|to(Integer|-integer)
      			))\\b
    '''
    name: "support.function.static.number.livescript"
  }
  {
    match: "[\\$\\w][\\w-]*"
    name: "variable.other.livescript"
  }
  {
    match: "\\\\[\\$\\.\\/\\%\\^\\#\\&\\*\\'\\\"\\!\\=\\+\\[\\]\\(\\)\\{\\}\\<\\>\\w-]*"
    name: "string.quoted.single.livescript"
  }
]
repository:
  double_quoted_string:
    patterns: [
      {
        begin: "\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.livescript"
        end: "\""
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.livescript"
        name: "string.quoted.double.livescript"
        patterns: [
          {
            match: "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
            name: "constant.character.escape.livescript"
          }
          {
            include: "#interpolated_livescript"
          }
        ]
      }
    ]
  embedded_comment:
    patterns: [
      {
        captures:
          "1":
            name: "punctuation.definition.comment.livescript"
        match: "(?<!\\\\)(#).*$\\n"
        name: "comment.line.number-sign.livescript"
      }
    ]
  embedded_spaced_comment:
    patterns: [
      {
        captures:
          "1":
            name: "punctuation.definition.comment.livescript"
        match: "(?<!\\\\)(#\\s).*$\\n"
        name: "comment.line.number-sign.livescript"
      }
    ]
  constructor_variable:
    patterns: [
      {
        match: "([a-zA-Z$_][\\w$-]*)(@{2})([a-zA-Z$_][\\w$-]*)?"
        name: "variable.other.readwrite.constructor.livescript"
      }
    ]
  instance_variable:
    patterns: [
      {
        match: "(?<![$\\w\\-])(@)"
        name: "variable.other.readwrite.instance.livescript"
      }
    ]
  interpolated_livescript:
    patterns: [
      {
        begin: '\\#\\{'
        captures:
          "0":
            name: "punctuation.section.embedded.livescript"
        end: '\\}'
        name: "source.livescript.embedded.source"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
      {
        begin: "\\#"
        match: "#([a-zA-Z$_-]+|@)"
        end: ""
        name: "source.livescript.embedded.source.simple"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
    ]
  numeric:
    patterns: [
      {
        match: "(?<![\\$@a-zA-Z_])(([0-9]+r[0-9_]+)|((16r|0[xX])[0-9a-fA-F_]+)|([0-9]+(\\.[0-9]+[0-9_]*)?(e[+\\-]?[0-9_]+)?)[_a-zA-Z0-9]*)"
        name: "constant.numeric.livescript"
      }
    ]
  single_quoted_string:
    patterns: [
      {
        begin: "'"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.livescript"
        end: "'"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.livescript"
        name: "string.quoted.single.livescript"
        patterns: [
          {
            match: "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
            name: "constant.character.escape.livescript"
          }
        ]
      }
    ]
  variable_name:
    patterns: [
      {
        captures:
          "1":
            name: "variable.assignment.livescript"
        match: "([a-zA-Z\\$_][\\w$-]*(\\.\\w+)*)(?!\\-)"
        name: "variable.assignment.livescript"
      }
    ]
scopeName: "source.livescript"
